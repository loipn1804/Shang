package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.CartDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CART_DETAIL.
*/
public class CartDetailDao extends AbstractDao<CartDetail, Long> {

    public static final String TABLENAME = "CART_DETAIL";

    /**
     * Properties of entity CartDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Entity_id = new Property(0, Long.class, "entity_id", true, "ENTITY_ID");
        public final static Property Items_count = new Property(1, Integer.class, "items_count", false, "ITEMS_COUNT");
        public final static Property Items_qty = new Property(2, Integer.class, "items_qty", false, "ITEMS_QTY");
        public final static Property Subtotal = new Property(3, Float.class, "subtotal", false, "SUBTOTAL");
        public final static Property Grand_total = new Property(4, Float.class, "grand_total", false, "GRAND_TOTAL");
        public final static Property Coupon_code = new Property(5, String.class, "coupon_code", false, "COUPON_CODE");
        public final static Property Customer_id = new Property(6, Long.class, "customer_id", false, "CUSTOMER_ID");
        public final static Property Created_at = new Property(7, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(8, String.class, "updated_at", false, "UPDATED_AT");
        public final static Property Tax_amount = new Property(9, Float.class, "tax_amount", false, "TAX_AMOUNT");
        public final static Property Shipping_amount = new Property(10, Float.class, "shipping_amount", false, "SHIPPING_AMOUNT");
        public final static Property Discount_amount = new Property(11, Float.class, "discount_amount", false, "DISCOUNT_AMOUNT");
        public final static Property Use_reward_points = new Property(12, Float.class, "use_reward_points", false, "USE_REWARD_POINTS");
        public final static Property Discount_description = new Property(13, String.class, "discount_description", false, "DISCOUNT_DESCRIPTION");
        public final static Property Voucher_list = new Property(14, String.class, "voucher_list", false, "VOUCHER_LIST");
    };


    public CartDetailDao(DaoConfig config) {
        super(config);
    }
    
    public CartDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CART_DETAIL' (" + //
                "'ENTITY_ID' INTEGER PRIMARY KEY ," + // 0: entity_id
                "'ITEMS_COUNT' INTEGER," + // 1: items_count
                "'ITEMS_QTY' INTEGER," + // 2: items_qty
                "'SUBTOTAL' REAL," + // 3: subtotal
                "'GRAND_TOTAL' REAL," + // 4: grand_total
                "'COUPON_CODE' TEXT," + // 5: coupon_code
                "'CUSTOMER_ID' INTEGER," + // 6: customer_id
                "'CREATED_AT' TEXT," + // 7: created_at
                "'UPDATED_AT' TEXT," + // 8: updated_at
                "'TAX_AMOUNT' REAL," + // 9: tax_amount
                "'SHIPPING_AMOUNT' REAL," + // 10: shipping_amount
                "'DISCOUNT_AMOUNT' REAL," + // 11: discount_amount
                "'USE_REWARD_POINTS' REAL," + // 12: use_reward_points
                "'DISCOUNT_DESCRIPTION' TEXT," + // 13: discount_description
                "'VOUCHER_LIST' TEXT);"); // 14: voucher_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CART_DETAIL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CartDetail entity) {
        stmt.clearBindings();
 
        Long entity_id = entity.getEntity_id();
        if (entity_id != null) {
            stmt.bindLong(1, entity_id);
        }
 
        Integer items_count = entity.getItems_count();
        if (items_count != null) {
            stmt.bindLong(2, items_count);
        }
 
        Integer items_qty = entity.getItems_qty();
        if (items_qty != null) {
            stmt.bindLong(3, items_qty);
        }
 
        Float subtotal = entity.getSubtotal();
        if (subtotal != null) {
            stmt.bindDouble(4, subtotal);
        }
 
        Float grand_total = entity.getGrand_total();
        if (grand_total != null) {
            stmt.bindDouble(5, grand_total);
        }
 
        String coupon_code = entity.getCoupon_code();
        if (coupon_code != null) {
            stmt.bindString(6, coupon_code);
        }
 
        Long customer_id = entity.getCustomer_id();
        if (customer_id != null) {
            stmt.bindLong(7, customer_id);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(8, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(9, updated_at);
        }
 
        Float tax_amount = entity.getTax_amount();
        if (tax_amount != null) {
            stmt.bindDouble(10, tax_amount);
        }
 
        Float shipping_amount = entity.getShipping_amount();
        if (shipping_amount != null) {
            stmt.bindDouble(11, shipping_amount);
        }
 
        Float discount_amount = entity.getDiscount_amount();
        if (discount_amount != null) {
            stmt.bindDouble(12, discount_amount);
        }
 
        Float use_reward_points = entity.getUse_reward_points();
        if (use_reward_points != null) {
            stmt.bindDouble(13, use_reward_points);
        }
 
        String discount_description = entity.getDiscount_description();
        if (discount_description != null) {
            stmt.bindString(14, discount_description);
        }
 
        String voucher_list = entity.getVoucher_list();
        if (voucher_list != null) {
            stmt.bindString(15, voucher_list);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CartDetail readEntity(Cursor cursor, int offset) {
        CartDetail entity = new CartDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // entity_id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // items_count
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // items_qty
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // subtotal
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // grand_total
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // coupon_code
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // customer_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // created_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // updated_at
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9), // tax_amount
            cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // shipping_amount
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // discount_amount
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // use_reward_points
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // discount_description
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // voucher_list
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CartDetail entity, int offset) {
        entity.setEntity_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItems_count(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setItems_qty(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSubtotal(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setGrand_total(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setCoupon_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCustomer_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setCreated_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUpdated_at(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTax_amount(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
        entity.setShipping_amount(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setDiscount_amount(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setUse_reward_points(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setDiscount_description(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setVoucher_list(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CartDetail entity, long rowId) {
        entity.setEntity_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CartDetail entity) {
        if(entity != null) {
            return entity.getEntity_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
