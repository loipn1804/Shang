package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Country;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table COUNTRY.
*/
public class CountryDao extends AbstractDao<Country, String> {

    public static final String TABLENAME = "COUNTRY";

    /**
     * Properties of entity Country.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Value = new Property(0, String.class, "value", true, "VALUE");
        public final static Property Label = new Property(1, String.class, "label", false, "LABEL");
        public final static Property Set_default = new Property(2, Integer.class, "set_default", false, "SET_DEFAULT");
    };


    public CountryDao(DaoConfig config) {
        super(config);
    }
    
    public CountryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'COUNTRY' (" + //
                "'VALUE' TEXT PRIMARY KEY NOT NULL ," + // 0: value
                "'LABEL' TEXT," + // 1: label
                "'SET_DEFAULT' INTEGER);"); // 2: set_default
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'COUNTRY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Country entity) {
        stmt.clearBindings();
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(1, value);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(2, label);
        }
 
        Integer set_default = entity.getSet_default();
        if (set_default != null) {
            stmt.bindLong(3, set_default);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Country readEntity(Cursor cursor, int offset) {
        Country entity = new Country( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // value
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // label
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2) // set_default
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Country entity, int offset) {
        entity.setValue(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLabel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSet_default(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Country entity, long rowId) {
        return entity.getValue();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Country entity) {
        if(entity != null) {
            return entity.getValue();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
