package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Category;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CATEGORY.
*/
public class CategoryDao extends AbstractDao<Category, Long> {

    public static final String TABLENAME = "CATEGORY";

    /**
     * Properties of entity Category.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Entity_id = new Property(0, Long.class, "entity_id", true, "ENTITY_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Position = new Property(2, Integer.class, "position", false, "POSITION");
        public final static Property Image_url = new Property(3, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Thumbnail_url = new Property(4, String.class, "thumbnail_url", false, "THUMBNAIL_URL");
        public final static Property Product_count = new Property(5, Integer.class, "product_count", false, "PRODUCT_COUNT");
    };


    public CategoryDao(DaoConfig config) {
        super(config);
    }
    
    public CategoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CATEGORY' (" + //
                "'ENTITY_ID' INTEGER PRIMARY KEY ," + // 0: entity_id
                "'NAME' TEXT," + // 1: name
                "'POSITION' INTEGER," + // 2: position
                "'IMAGE_URL' TEXT," + // 3: image_url
                "'THUMBNAIL_URL' TEXT," + // 4: thumbnail_url
                "'PRODUCT_COUNT' INTEGER);"); // 5: product_count
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CATEGORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Category entity) {
        stmt.clearBindings();
 
        Long entity_id = entity.getEntity_id();
        if (entity_id != null) {
            stmt.bindLong(1, entity_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(3, position);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(4, image_url);
        }
 
        String thumbnail_url = entity.getThumbnail_url();
        if (thumbnail_url != null) {
            stmt.bindString(5, thumbnail_url);
        }
 
        Integer product_count = entity.getProduct_count();
        if (product_count != null) {
            stmt.bindLong(6, product_count);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Category readEntity(Cursor cursor, int offset) {
        Category entity = new Category( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // entity_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // position
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image_url
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // thumbnail_url
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // product_count
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Category entity, int offset) {
        entity.setEntity_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosition(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setImage_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setThumbnail_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProduct_count(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Category entity, long rowId) {
        entity.setEntity_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Category entity) {
        if(entity != null) {
            return entity.getEntity_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
