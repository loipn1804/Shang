package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.ConfigAttribute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIG_ATTRIBUTE.
*/
public class ConfigAttributeDao extends AbstractDao<ConfigAttribute, Long> {

    public static final String TABLENAME = "CONFIG_ATTRIBUTE";

    /**
     * Properties of entity ConfigAttribute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Attribute_id = new Property(0, Long.class, "attribute_id", true, "ATTRIBUTE_ID");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Label = new Property(2, String.class, "label", false, "LABEL");
        public final static Property Position = new Property(3, Integer.class, "position", false, "POSITION");
    };


    public ConfigAttributeDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigAttributeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIG_ATTRIBUTE' (" + //
                "'ATTRIBUTE_ID' INTEGER PRIMARY KEY ," + // 0: attribute_id
                "'CODE' TEXT," + // 1: code
                "'LABEL' TEXT," + // 2: label
                "'POSITION' INTEGER);"); // 3: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIG_ATTRIBUTE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConfigAttribute entity) {
        stmt.clearBindings();
 
        Long attribute_id = entity.getAttribute_id();
        if (attribute_id != null) {
            stmt.bindLong(1, attribute_id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(3, label);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(4, position);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConfigAttribute readEntity(Cursor cursor, int offset) {
        ConfigAttribute entity = new ConfigAttribute( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // attribute_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // label
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // position
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConfigAttribute entity, int offset) {
        entity.setAttribute_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLabel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConfigAttribute entity, long rowId) {
        entity.setAttribute_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConfigAttribute entity) {
        if(entity != null) {
            return entity.getAttribute_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
