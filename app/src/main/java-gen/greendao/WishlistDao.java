package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Wishlist;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WISHLIST.
*/
public class WishlistDao extends AbstractDao<Wishlist, Long> {

    public static final String TABLENAME = "WISHLIST";

    /**
     * Properties of entity Wishlist.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Wishlist_item_id = new Property(0, Long.class, "wishlist_item_id", true, "WISHLIST_ITEM_ID");
        public final static Property Product_id = new Property(1, Long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Sku = new Property(3, String.class, "sku", false, "SKU");
        public final static Property Manufacturer = new Property(4, String.class, "manufacturer", false, "MANUFACTURER");
        public final static Property Price = new Property(5, Float.class, "price", false, "PRICE");
        public final static Property Image_url = new Property(6, String.class, "image_url", false, "IMAGE_URL");
        public final static Property Added_at = new Property(7, String.class, "added_at", false, "ADDED_AT");
        public final static Property Type_id = new Property(8, String.class, "type_id", false, "TYPE_ID");
    };


    public WishlistDao(DaoConfig config) {
        super(config);
    }
    
    public WishlistDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WISHLIST' (" + //
                "'WISHLIST_ITEM_ID' INTEGER PRIMARY KEY ," + // 0: wishlist_item_id
                "'PRODUCT_ID' INTEGER," + // 1: product_id
                "'NAME' TEXT," + // 2: name
                "'SKU' TEXT," + // 3: sku
                "'MANUFACTURER' TEXT," + // 4: manufacturer
                "'PRICE' REAL," + // 5: price
                "'IMAGE_URL' TEXT," + // 6: image_url
                "'ADDED_AT' TEXT," + // 7: added_at
                "'TYPE_ID' TEXT);"); // 8: type_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WISHLIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Wishlist entity) {
        stmt.clearBindings();
 
        Long wishlist_item_id = entity.getWishlist_item_id();
        if (wishlist_item_id != null) {
            stmt.bindLong(1, wishlist_item_id);
        }
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(2, product_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String sku = entity.getSku();
        if (sku != null) {
            stmt.bindString(4, sku);
        }
 
        String manufacturer = entity.getManufacturer();
        if (manufacturer != null) {
            stmt.bindString(5, manufacturer);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(6, price);
        }
 
        String image_url = entity.getImage_url();
        if (image_url != null) {
            stmt.bindString(7, image_url);
        }
 
        String added_at = entity.getAdded_at();
        if (added_at != null) {
            stmt.bindString(8, added_at);
        }
 
        String type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindString(9, type_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Wishlist readEntity(Cursor cursor, int offset) {
        Wishlist entity = new Wishlist( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // wishlist_item_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // product_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sku
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // manufacturer
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // image_url
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // added_at
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Wishlist entity, int offset) {
        entity.setWishlist_item_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProduct_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSku(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManufacturer(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setImage_url(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdded_at(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setType_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Wishlist entity, long rowId) {
        entity.setWishlist_item_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Wishlist entity) {
        if(entity != null) {
            return entity.getWishlist_item_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
