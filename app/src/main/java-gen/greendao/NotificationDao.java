package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Notification;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table NOTIFICATION.
*/
public class NotificationDao extends AbstractDao<Notification, Long> {

    public static final String TABLENAME = "NOTIFICATION";

    /**
     * Properties of entity Notification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Account_id = new Property(1, Long.class, "account_id", false, "ACCOUNT_ID");
        public final static Property Type_id = new Property(2, Long.class, "type_id", false, "TYPE_ID");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Message = new Property(5, String.class, "message", false, "MESSAGE");
        public final static Property Is_read = new Property(6, Integer.class, "is_read", false, "IS_READ");
        public final static Property Is_remove = new Property(7, Integer.class, "is_remove", false, "IS_REMOVE");
        public final static Property Created_at = new Property(8, String.class, "created_at", false, "CREATED_AT");
        public final static Property Updated_at = new Property(9, String.class, "updated_at", false, "UPDATED_AT");
    };


    public NotificationDao(DaoConfig config) {
        super(config);
    }
    
    public NotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'NOTIFICATION' (" + //
                "'ID' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_ID' INTEGER," + // 1: account_id
                "'TYPE_ID' INTEGER," + // 2: type_id
                "'TYPE' TEXT," + // 3: type
                "'TITLE' TEXT," + // 4: title
                "'MESSAGE' TEXT," + // 5: message
                "'IS_READ' INTEGER," + // 6: is_read
                "'IS_REMOVE' INTEGER," + // 7: is_remove
                "'CREATED_AT' TEXT," + // 8: created_at
                "'UPDATED_AT' TEXT);"); // 9: updated_at
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTIFICATION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Notification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long account_id = entity.getAccount_id();
        if (account_id != null) {
            stmt.bindLong(2, account_id);
        }
 
        Long type_id = entity.getType_id();
        if (type_id != null) {
            stmt.bindLong(3, type_id);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(6, message);
        }
 
        Integer is_read = entity.getIs_read();
        if (is_read != null) {
            stmt.bindLong(7, is_read);
        }
 
        Integer is_remove = entity.getIs_remove();
        if (is_remove != null) {
            stmt.bindLong(8, is_remove);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(9, created_at);
        }
 
        String updated_at = entity.getUpdated_at();
        if (updated_at != null) {
            stmt.bindString(10, updated_at);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Notification readEntity(Cursor cursor, int offset) {
        Notification entity = new Notification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // account_id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // type_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // message
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // is_read
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // is_remove
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // created_at
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // updated_at
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Notification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setType_id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMessage(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIs_read(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIs_remove(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCreated_at(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUpdated_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Notification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Notification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
