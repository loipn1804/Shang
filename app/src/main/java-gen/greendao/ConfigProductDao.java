package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.ConfigProduct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CONFIG_PRODUCT.
*/
public class ConfigProductDao extends AbstractDao<ConfigProduct, Long> {

    public static final String TABLENAME = "CONFIG_PRODUCT";

    /**
     * Properties of entity ConfigProduct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Product_id = new Property(0, Long.class, "product_id", true, "PRODUCT_ID");
        public final static Property Base_image = new Property(1, String.class, "base_image", false, "BASE_IMAGE");
        public final static Property Images = new Property(2, String.class, "images", false, "IMAGES");
        public final static Property Position = new Property(3, Integer.class, "position", false, "POSITION");
    };


    public ConfigProductDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CONFIG_PRODUCT' (" + //
                "'PRODUCT_ID' INTEGER PRIMARY KEY ," + // 0: product_id
                "'BASE_IMAGE' TEXT," + // 1: base_image
                "'IMAGES' TEXT," + // 2: images
                "'POSITION' INTEGER);"); // 3: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CONFIG_PRODUCT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ConfigProduct entity) {
        stmt.clearBindings();
 
        Long product_id = entity.getProduct_id();
        if (product_id != null) {
            stmt.bindLong(1, product_id);
        }
 
        String base_image = entity.getBase_image();
        if (base_image != null) {
            stmt.bindString(2, base_image);
        }
 
        String images = entity.getImages();
        if (images != null) {
            stmt.bindString(3, images);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(4, position);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ConfigProduct readEntity(Cursor cursor, int offset) {
        ConfigProduct entity = new ConfigProduct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // product_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // base_image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // images
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // position
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ConfigProduct entity, int offset) {
        entity.setProduct_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBase_image(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImages(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPosition(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ConfigProduct entity, long rowId) {
        entity.setProduct_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ConfigProduct entity) {
        if(entity != null) {
            return entity.getProduct_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
