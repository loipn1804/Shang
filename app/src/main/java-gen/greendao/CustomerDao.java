package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Customer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table CUSTOMER.
*/
public class CustomerDao extends AbstractDao<Customer, Long> {

    public static final String TABLENAME = "CUSTOMER";

    /**
     * Properties of entity Customer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Entity_id = new Property(0, Long.class, "entity_id", true, "ENTITY_ID");
        public final static Property Firstname = new Property(1, String.class, "firstname", false, "FIRSTNAME");
        public final static Property Middlename = new Property(2, String.class, "middlename", false, "MIDDLENAME");
        public final static Property Lastname = new Property(3, String.class, "lastname", false, "LASTNAME");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Dob = new Property(5, String.class, "dob", false, "DOB");
        public final static Property Facebook_id = new Property(6, String.class, "facebook_id", false, "FACEBOOK_ID");
        public final static Property Is_login_fb = new Property(7, Boolean.class, "is_login_fb", false, "IS_LOGIN_FB");
        public final static Property Picture_url = new Property(8, String.class, "picture_url", false, "PICTURE_URL");
        public final static Property Cart_items_count = new Property(9, Integer.class, "cart_items_count", false, "CART_ITEMS_COUNT");
        public final static Property Wishlist_items_count = new Property(10, Integer.class, "wishlist_items_count", false, "WISHLIST_ITEMS_COUNT");
        public final static Property Unread_alerts_count = new Property(11, Integer.class, "unread_alerts_count", false, "UNREAD_ALERTS_COUNT");
        public final static Property Shipping_address = new Property(12, String.class, "shipping_address", false, "SHIPPING_ADDRESS");
        public final static Property Billing_address = new Property(13, String.class, "billing_address", false, "BILLING_ADDRESS");
        public final static Property Is_notification_sound = new Property(14, Integer.class, "is_notification_sound", false, "IS_NOTIFICATION_SOUND");
        public final static Property Orders_count = new Property(15, Integer.class, "orders_count", false, "ORDERS_COUNT");
        public final static Property Reward_points = new Property(16, Integer.class, "reward_points", false, "REWARD_POINTS");
        public final static Property Evoucher_amount = new Property(17, Double.class, "evoucher_amount", false, "EVOUCHER_AMOUNT");
        public final static Property Log_num = new Property(18, Integer.class, "log_num", false, "LOG_NUM");
        public final static Property Card_code = new Property(19, String.class, "card_code", false, "CARD_CODE");
    };


    public CustomerDao(DaoConfig config) {
        super(config);
    }
    
    public CustomerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'CUSTOMER' (" + //
                "'ENTITY_ID' INTEGER PRIMARY KEY ," + // 0: entity_id
                "'FIRSTNAME' TEXT," + // 1: firstname
                "'MIDDLENAME' TEXT," + // 2: middlename
                "'LASTNAME' TEXT," + // 3: lastname
                "'EMAIL' TEXT," + // 4: email
                "'DOB' TEXT," + // 5: dob
                "'FACEBOOK_ID' TEXT," + // 6: facebook_id
                "'IS_LOGIN_FB' INTEGER," + // 7: is_login_fb
                "'PICTURE_URL' TEXT," + // 8: picture_url
                "'CART_ITEMS_COUNT' INTEGER," + // 9: cart_items_count
                "'WISHLIST_ITEMS_COUNT' INTEGER," + // 10: wishlist_items_count
                "'UNREAD_ALERTS_COUNT' INTEGER," + // 11: unread_alerts_count
                "'SHIPPING_ADDRESS' TEXT," + // 12: shipping_address
                "'BILLING_ADDRESS' TEXT," + // 13: billing_address
                "'IS_NOTIFICATION_SOUND' INTEGER," + // 14: is_notification_sound
                "'ORDERS_COUNT' INTEGER," + // 15: orders_count
                "'REWARD_POINTS' INTEGER," + // 16: reward_points
                "'EVOUCHER_AMOUNT' REAL," + // 17: evoucher_amount
                "'LOG_NUM' INTEGER," + // 18: log_num
                "'CARD_CODE' TEXT);"); // 19: card_code
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CUSTOMER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Customer entity) {
        stmt.clearBindings();
 
        Long entity_id = entity.getEntity_id();
        if (entity_id != null) {
            stmt.bindLong(1, entity_id);
        }
 
        String firstname = entity.getFirstname();
        if (firstname != null) {
            stmt.bindString(2, firstname);
        }
 
        String middlename = entity.getMiddlename();
        if (middlename != null) {
            stmt.bindString(3, middlename);
        }
 
        String lastname = entity.getLastname();
        if (lastname != null) {
            stmt.bindString(4, lastname);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String dob = entity.getDob();
        if (dob != null) {
            stmt.bindString(6, dob);
        }
 
        String facebook_id = entity.getFacebook_id();
        if (facebook_id != null) {
            stmt.bindString(7, facebook_id);
        }
 
        Boolean is_login_fb = entity.getIs_login_fb();
        if (is_login_fb != null) {
            stmt.bindLong(8, is_login_fb ? 1l: 0l);
        }
 
        String picture_url = entity.getPicture_url();
        if (picture_url != null) {
            stmt.bindString(9, picture_url);
        }
 
        Integer cart_items_count = entity.getCart_items_count();
        if (cart_items_count != null) {
            stmt.bindLong(10, cart_items_count);
        }
 
        Integer wishlist_items_count = entity.getWishlist_items_count();
        if (wishlist_items_count != null) {
            stmt.bindLong(11, wishlist_items_count);
        }
 
        Integer unread_alerts_count = entity.getUnread_alerts_count();
        if (unread_alerts_count != null) {
            stmt.bindLong(12, unread_alerts_count);
        }
 
        String shipping_address = entity.getShipping_address();
        if (shipping_address != null) {
            stmt.bindString(13, shipping_address);
        }
 
        String billing_address = entity.getBilling_address();
        if (billing_address != null) {
            stmt.bindString(14, billing_address);
        }
 
        Integer is_notification_sound = entity.getIs_notification_sound();
        if (is_notification_sound != null) {
            stmt.bindLong(15, is_notification_sound);
        }
 
        Integer orders_count = entity.getOrders_count();
        if (orders_count != null) {
            stmt.bindLong(16, orders_count);
        }
 
        Integer reward_points = entity.getReward_points();
        if (reward_points != null) {
            stmt.bindLong(17, reward_points);
        }
 
        Double evoucher_amount = entity.getEvoucher_amount();
        if (evoucher_amount != null) {
            stmt.bindDouble(18, evoucher_amount);
        }
 
        Integer log_num = entity.getLog_num();
        if (log_num != null) {
            stmt.bindLong(19, log_num);
        }
 
        String card_code = entity.getCard_code();
        if (card_code != null) {
            stmt.bindString(20, card_code);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Customer readEntity(Cursor cursor, int offset) {
        Customer entity = new Customer( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // entity_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // firstname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // middlename
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // lastname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dob
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // facebook_id
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // is_login_fb
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // picture_url
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // cart_items_count
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // wishlist_items_count
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // unread_alerts_count
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // shipping_address
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // billing_address
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // is_notification_sound
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // orders_count
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // reward_points
            cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17), // evoucher_amount
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // log_num
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // card_code
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Customer entity, int offset) {
        entity.setEntity_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFirstname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMiddlename(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLastname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDob(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFacebook_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIs_login_fb(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setPicture_url(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCart_items_count(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWishlist_items_count(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUnread_alerts_count(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setShipping_address(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBilling_address(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_notification_sound(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setOrders_count(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setReward_points(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setEvoucher_amount(cursor.isNull(offset + 17) ? null : cursor.getDouble(offset + 17));
        entity.setLog_num(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setCard_code(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Customer entity, long rowId) {
        entity.setEntity_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Customer entity) {
        if(entity != null) {
            return entity.getEntity_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
